var WAValidator = require('multicoin-address-validator');

function validateaddressvendor(address, vendor) {
    return WAValidator.validate(address, vendor) ? true : false;
}

function validateaddress(address) {
    let supportedchain = [];
    if(address == null) return supportedchain;
    if (validateaddressvendor(address, '0x')) supportedchain.push({ name: "0x", ticker: "zrx" });
    if (validateaddressvendor(address, 'aave')) supportedchain.push({ name: "Aave Coin", ticker: "aave" });
    if (validateaddressvendor(address, 'algo')) supportedchain.push({ name: "Algorand", ticker: "algo" });
    if (validateaddressvendor(address, 'ape')) supportedchain.push({ name: "Apecoin", ticker: "ape" });
    if (validateaddressvendor(address, 'ant')) supportedchain.push({ name: "Aragon", ticker: "ant" });
    if (validateaddressvendor(address, 'arb')) supportedchain.push({ name: "Arbitrum", ticker: "arb" });
    if (validateaddressvendor(address, 'rep')) supportedchain.push({ name: "Augur", ticker: "rep" });
    if (validateaddressvendor(address, 'repv2')) supportedchain.push({ name: "AugurV2", ticker: "repv2" });
    if (validateaddressvendor(address, 'aur')) supportedchain.push({ name: "AuroraCoin", ticker: "aur" });
    if (validateaddressvendor(address, 'avax')) supportedchain.push({ name: "Avalanche", ticker: "avax" });
    if (validateaddressvendor(address, 'bnt')) supportedchain.push({ name: "Bancor", ticker: "bnt" });
    if (validateaddressvendor(address, 'band')) supportedchain.push({ name: "Band Protocol", ticker: "band" });
    if (validateaddressvendor(address, 'bkx')) supportedchain.push({ name: "Bankex", ticker: "bkx" });
    if (validateaddressvendor(address, 'bat')) supportedchain.push({ name: "Basic Attention Token", ticker: "bat" });
    if (validateaddressvendor(address, 'bvc')) supportedchain.push({ name: "BeaverCoin", ticker: "bvc" });
    if (validateaddressvendor(address, 'bnb')) supportedchain.push({ name: "Binance", ticker: "bnb" });
    if (validateaddressvendor(address, 'bio')) supportedchain.push({ name: "BioCoin", ticker: "bio" });
    if (validateaddressvendor(address, 'btc')) supportedchain.push({ name: "Bitcoin", ticker: "btc" });
    if (validateaddressvendor(address, 'bsv')) supportedchain.push({ name: "Bitcoin SV", ticker: "bsv" });
    if (validateaddressvendor(address, 'bch')) supportedchain.push({ name: "BitcoinCash", ticker: "bch" });
    if (validateaddressvendor(address, 'btg')) supportedchain.push({ name: "BitcoinGold", ticker: "btg" });
    if (validateaddressvendor(address, 'btcp')) supportedchain.push({ name: "BitcoinPrivate", ticker: "btcp" });
    if (validateaddressvendor(address, 'btcz')) supportedchain.push({ name: "BitcoinZ", ticker: "btcz" });
    if (validateaddressvendor(address, 'btt')) supportedchain.push({ name: "BlockTrade", ticker: "btt" });
    if (validateaddressvendor(address, 'btu')) supportedchain.push({ name: "BTU Protocol", ticker: "btu" });
    if (validateaddressvendor(address, 'clo')) supportedchain.push({ name: "Callisto", ticker: "clo" });
    if (validateaddressvendor(address, 'ada')) supportedchain.push({ name: "Cardano", ticker: "ada" });
    if (validateaddressvendor(address, 'celo')) supportedchain.push({ name: "Celo", ticker: "celo" });
    if (validateaddressvendor(address, 'link')) supportedchain.push({ name: "Chainlink", ticker: "link" });
    if (validateaddressvendor(address, 'cvc')) supportedchain.push({ name: "Civic", ticker: "cvc" });
    if (validateaddressvendor(address, 'comp')) supportedchain.push({ name: "Compound", ticker: "comp" });
    if (validateaddressvendor(address, 'lba')) supportedchain.push({ name: "Cred", ticker: "lba" });
    if (validateaddressvendor(address, 'cro')) supportedchain.push({ name: "Crypto.com Coin", ticker: "cro" });
    if (validateaddressvendor(address, 'crv')) supportedchain.push({ name: "Curve DAO", ticker: "crv" });
    if (validateaddressvendor(address, 'cusd')) supportedchain.push({ name: "CUSD", ticker: "cusd" });
    if (validateaddressvendor(address, 'dash')) supportedchain.push({ name: "Dash", ticker: "dash" });
    if (validateaddressvendor(address, 'mana')) supportedchain.push({ name: "Decentraland", ticker: "mana" });
    if (validateaddressvendor(address, 'dcr')) supportedchain.push({ name: "Decred", ticker: "dcr" });
    if (validateaddressvendor(address, 'dgb')) supportedchain.push({ name: "DigiByte", ticker: "dgb" });
    if (validateaddressvendor(address, 'dnt')) supportedchain.push({ name: "District0x", ticker: "dnt" });
    if (validateaddressvendor(address, 'doge')) supportedchain.push({ name: "DogeCoin", ticker: "doge" });
    if (validateaddressvendor(address, 'enj')) supportedchain.push({ name: "Enjin Coin", ticker: "enj" });
    if (validateaddressvendor(address, 'eos')) supportedchain.push({ name: "EOS", ticker: "eos" });
    if (validateaddressvendor(address, 'eth')) supportedchain.push({ name: "Ethereum", ticker: "eth" });
    if (validateaddressvendor(address, 'etc')) supportedchain.push({ name: "EthereumClassic", ticker: "etc" });
    if (validateaddressvendor(address, 'ethw')) supportedchain.push({ name: "EthereumPow", ticker: "ethw" });
    if (validateaddressvendor(address, 'etz')) supportedchain.push({ name: "EtherZero", ticker: "etz" });
    if (validateaddressvendor(address, 'exp')) supportedchain.push({ name: "Expanse", ticker: "exp" });
    if (validateaddressvendor(address, 'fct')) supportedchain.push({ name: "FirmaChain", ticker: "fct" });
    if (validateaddressvendor(address, 'flr')) supportedchain.push({ name: "Flare", ticker: "flr" });
    if (validateaddressvendor(address, 'frc')) supportedchain.push({ name: "FreiCoin", ticker: "frc" });
    if (validateaddressvendor(address, 'game')) supportedchain.push({ name: "GameCredits", ticker: "game" });
    if (validateaddressvendor(address, 'grlc')) supportedchain.push({ name: "GarliCoin", ticker: "grlc" });
    if (validateaddressvendor(address, 'gno')) supportedchain.push({ name: "Gnosis", ticker: "gno" });
    if (validateaddressvendor(address, 'glm')) supportedchain.push({ name: "Golem", ticker: "glm" });
    if (validateaddressvendor(address, 'gnt')) supportedchain.push({ name: "Golem (GNT)", ticker: "gnt" });
    if (validateaddressvendor(address, 'hft')) supportedchain.push({ name: "Hashflow", ticker: "hft" });
    if (validateaddressvendor(address, 'hedg')) supportedchain.push({ name: "HedgeTrade", ticker: "hedg" });
    if (validateaddressvendor(address, 'hush')) supportedchain.push({ name: "Hush", ticker: "hush" });
    if (validateaddressvendor(address, 'xsc')) supportedchain.push({ name: "HyperSpace", ticker: "xsc" });
    if (validateaddressvendor(address, 'rlc')) supportedchain.push({ name: "iExec RLC", ticker: "rlc" });
    if (validateaddressvendor(address, 'kmd')) supportedchain.push({ name: "Komodo", ticker: "kmd" });
    if (validateaddressvendor(address, 'lbc')) supportedchain.push({ name: "LBRY Credits", ticker: "lbc" });
    if (validateaddressvendor(address, 'ldo')) supportedchain.push({ name: "Lido DAO Token", ticker: "ldo" });
    if (validateaddressvendor(address, 'ltc')) supportedchain.push({ name: "LiteCoin", ticker: "ltc" });
    if (validateaddressvendor(address, 'loki')) supportedchain.push({ name: "loki", ticker: "loki" });
    if (validateaddressvendor(address, 'loom')) supportedchain.push({ name: "Loom Network", ticker: "loom" });
    if (validateaddressvendor(address, 'mkr')) supportedchain.push({ name: "Maker", ticker: "mkr" });
    if (validateaddressvendor(address, 'gup')) supportedchain.push({ name: "Matchpool", ticker: "gup" });
    if (validateaddressvendor(address, 'matic')) supportedchain.push({ name: "Matic", ticker: "matic" });
    if (validateaddressvendor(address, 'mec')) supportedchain.push({ name: "MegaCoin", ticker: "mec" });
    if (validateaddressvendor(address, 'mln')) supportedchain.push({ name: "Melon", ticker: "mln" });
    if (validateaddressvendor(address, 'mtl')) supportedchain.push({ name: "Metal", ticker: "mtl" });
    if (validateaddressvendor(address, 'xmr')) supportedchain.push({ name: "Monero", ticker: "xmr" });
    if (validateaddressvendor(address, 'dai')) supportedchain.push({ name: "Multi-collateral DAI", ticker: "dai" });
    if (validateaddressvendor(address, 'nmc')) supportedchain.push({ name: "NameCoin", ticker: "nmc" });
    if (validateaddressvendor(address, 'nano')) supportedchain.push({ name: "Nano", ticker: "nano" });
    if (validateaddressvendor(address, 'xem')) supportedchain.push({ name: "Nem", ticker: "xem" });
    if (validateaddressvendor(address, 'neo')) supportedchain.push({ name: "Neo", ticker: "neo" });
    if (validateaddressvendor(address, 'gas')) supportedchain.push({ name: "NeoGas", ticker: "gas" });
    if (validateaddressvendor(address, 'nmr')) supportedchain.push({ name: "Numeraire", ticker: "nmr" });
    if (validateaddressvendor(address, 'ocean')) supportedchain.push({ name: "Ocean Protocol", ticker: "ocean" });
    if (validateaddressvendor(address, 'ocn')) supportedchain.push({ name: "Odyssey", ticker: "ocn" });
    if (validateaddressvendor(address, 'omg')) supportedchain.push({ name: "OmiseGO", ticker: "omg" });
    if (validateaddressvendor(address, 'op')) supportedchain.push({ name: "Optimism", ticker: "op" });
    if (validateaddressvendor(address, 'pax')) supportedchain.push({ name: "Paxos", ticker: "pax" });
    if (validateaddressvendor(address, 'ppc')) supportedchain.push({ name: "PeerCoin", ticker: "ppc" });
    if (validateaddressvendor(address, 'pivx')) supportedchain.push({ name: "PIVX", ticker: "pivx" });
    if (validateaddressvendor(address, 'dot')) supportedchain.push({ name: "Polkadot", ticker: "dot" });
    if (validateaddressvendor(address, 'poly')) supportedchain.push({ name: "Polymath", ticker: "poly" });
    if (validateaddressvendor(address, 'xpm')) supportedchain.push({ name: "PrimeCoin", ticker: "xpm" });
    if (validateaddressvendor(address, 'pts')) supportedchain.push({ name: "ProtoShares", ticker: "pts" });
    if (validateaddressvendor(address, 'qtum')) supportedchain.push({ name: "Qtum", ticker: "qtum" });
    if (validateaddressvendor(address, 'qnt')) supportedchain.push({ name: "Quant", ticker: "qnt" });
    if (validateaddressvendor(address, 'qrl')) supportedchain.push({ name: "Quantum Resistant Ledger", ticker: "qrl" });
    if (validateaddressvendor(address, 'xrb')) supportedchain.push({ name: "RaiBlocks", ticker: "xrb" });
    if (validateaddressvendor(address, 'rcn')) supportedchain.push({ name: "Ripio Credit Network", ticker: "rcn" });
    if (validateaddressvendor(address, 'xrp')) supportedchain.push({ name: "Ripple", ticker: "xrp" });
    if (validateaddressvendor(address, 'salt')) supportedchain.push({ name: "Salt", ticker: "salt" });
    if (validateaddressvendor(address, 'serv')) supportedchain.push({ name: "Serve", ticker: "serv" });
    if (validateaddressvendor(address, 'sc')) supportedchain.push({ name: "Siacoin", ticker: "sc" });
    if (validateaddressvendor(address, 'sng')) supportedchain.push({ name: "SnowGem", ticker: "sng" });
    if (validateaddressvendor(address, 'sol')) supportedchain.push({ name: "Solana", ticker: "sol" });
    if (validateaddressvendor(address, 'slr')) supportedchain.push({ name: "SolarCoin", ticker: "slr" });
    if (validateaddressvendor(address, 'solve')) supportedchain.push({ name: "SOLVE", ticker: "solve" });
    if (validateaddressvendor(address, 'spnd')) supportedchain.push({ name: "Spendcoin", ticker: "spnd" });
    if (validateaddressvendor(address, 'snt')) supportedchain.push({ name: "Status", ticker: "snt" });
    if (validateaddressvendor(address, 'xlm')) supportedchain.push({ name: "Stellar", ticker: "xlm" });
    if (validateaddressvendor(address, 'storj')) supportedchain.push({ name: "Storj", ticker: "storj" });
    if (validateaddressvendor(address, 'storm')) supportedchain.push({ name: "Storm", ticker: "storm" });
    if (validateaddressvendor(address, 'stmx')) supportedchain.push({ name: "StormX", ticker: "stmx" });
    if (validateaddressvendor(address, 'swt')) supportedchain.push({ name: "Swarm City", ticker: "swt" });
    if (validateaddressvendor(address, 'snx')) supportedchain.push({ name: "Synthetix Network", ticker: "snx" });
    if (validateaddressvendor(address, 'xtp')) supportedchain.push({ name: "Tap", ticker: "xtp" });
    if (validateaddressvendor(address, 'temco')) supportedchain.push({ name: "TEMCO", ticker: "temco" });
    if (validateaddressvendor(address, 'pay')) supportedchain.push({ name: "TenX", ticker: "pay" });
    if (validateaddressvendor(address, 'usdt')) supportedchain.push({ name: "Tether", ticker: "usdt" });
    if (validateaddressvendor(address, 'xtz')) supportedchain.push({ name: "Tezos", ticker: "xtz" });
    if (validateaddressvendor(address, 'grt')) supportedchain.push({ name: "The Graph", ticker: "grt" });
    if (validateaddressvendor(address, 'trx')) supportedchain.push({ name: "Tron", ticker: "trx" });
    if (validateaddressvendor(address, 'tusd')) supportedchain.push({ name: "TrueUSD", ticker: "tusd" });
    if (validateaddressvendor(address, 'uni')) supportedchain.push({ name: "Uniswap Coin", ticker: "uni" });
    if (validateaddressvendor(address, 'usdc')) supportedchain.push({ name: "USD Coin", ticker: "usdc" });
    if (validateaddressvendor(address, 'vet')) supportedchain.push({ name: "VeChain", ticker: "vet" });
    if (validateaddressvendor(address, 'vtc')) supportedchain.push({ name: "VertCoin", ticker: "vtc" });
    if (validateaddressvendor(address, 'vib')) supportedchain.push({ name: "Viberate", ticker: "vib" });
    if (validateaddressvendor(address, 'vot')) supportedchain.push({ name: "VoteCoin", ticker: "vot" });
    if (validateaddressvendor(address, 'waves')) supportedchain.push({ name: "Waves", ticker: "waves" });
    if (validateaddressvendor(address, 'wings')) supportedchain.push({ name: "Wings", ticker: "wings" });
    if (validateaddressvendor(address, 'yfi')) supportedchain.push({ name: "Yearn.finance", ticker: "yfi" });
    if (validateaddressvendor(address, 'zec')) supportedchain.push({ name: "ZCash", ticker: "zec" });
    if (validateaddressvendor(address, 'zcl')) supportedchain.push({ name: "ZClassic", ticker: "zcl" });
    if (validateaddressvendor(address, 'zen')) supportedchain.push({ name: "ZenCash", ticker: "zen" });
    return supportedchain;
};
module.exports = { validateaddress };